from datasets import load_dataset
import os

if __name__ == '__main__':

    raw_datasets = load_dataset(
        os.path.join(os.path.dirname(__file__), "gner_dataset.py"),
        data_dir='../data/',
        instruction_file='../configs/instruction_configs/instruction.json',
        data_config_dir='../configs/dataset_configs/task_adaptation_configs',
        add_dataset_name=False,
        trust_remote_code=True
    )
    print(raw_datasets)

    print(raw_datasets['validation'][0]['instance']['instruction_inputs'])
    #raw_datasets['test'].to_json('../../../../datasets/KIND/test_gner_format.json')
    #raw_datasets['train'].to_json('../data/pileNER-SLIMER-391x100_wD&G_train.json')
    raw_datasets['validation'].to_json('../data/pileNER-SLIMER-391x50_wD&G_validation.json')

    #data = load_dataset("json", data_files=f'../data/MultinerdIT/test_GNER_format.json')['train']
    #print(data)
    #print(data[0])

    from transformers import AutoTokenizer

    #tokenizer = AutoTokenizer.from_pretrained("meta-llama/Llama-2-7b-chat-hf")
    tokenizer = AutoTokenizer.from_pretrained("meta-llama/Llama-3.1-8B-Instruct")

    #chat_template = tokenizer.get_chat_template()
    #print(chat_template)

    system_message = "You are an expert in Named Entity Recognition."
    row_json = [{"role": "system", "content": system_message},
                {"role": "user", "content": raw_datasets['validation'][0]['instance']['instruction_inputs']},
                {"role": "assistant", "content": raw_datasets['validation'][0]['instance']['prompt_labels']}]
    formatted_input = tokenizer.apply_chat_template(row_json, tokenize=False) #, add_generation_prompt=True)
    print(formatted_input)

    model_inputs = tokenizer.apply_chat_template(
        conversation=row_json[:-1],  # exclude last assistant message
        tokenize=True,
        truncation=True,
        padding=False,
        max_length=3072,
        add_generation_prompt=True,  # start the assistant response for continuation
        return_tensors=None,
        return_dict=False
    )
    print(len(model_inputs))
    print(model_inputs)
    print(tokenizer.decode(model_inputs))

    #print(tokenizer.tokenize("<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n\n"))

    decoded_text = tokenizer.decode([128000, 128006, 9125, 128007, 271, 38766, 1303, 33025, 2696, 25, 6790, 220, 2366, 18, 198, 15724, 2696, 25, 220, 1627, 10263, 220, 2366, 19, 271, 2675, 527, 459, 6335, 304, 41559, 10606, 48698, 13, 128009, 128006, 882, 128007, 271, 5618, 24564, 279, 11914, 3984, 11, 25607, 279, 955, 315, 5502, 369, 1855, 3492, 389, 264, 4037, 14656, 35941, 8197, 627, 5207, 3645, 374, 25, 3492, 62, 16, 13648, 62, 16, 705, 3492, 62, 17, 13648, 62, 17, 705, 12515, 1687, 3358, 1005, 279, 73166, 39480, 311, 2440, 279, 15086, 11, 1405, 512, 16, 13, 426, 12, 320, 11382, 8, 15151, 279, 1212, 315, 264, 7086, 5502, 627, 17, 13, 358, 12, 320, 25488, 8, 374, 1511, 369, 4339, 2949, 264, 7086, 5502, 719, 527, 539, 279, 1176, 3492, 627, 18, 13, 507, 320, 42465, 8, 72214, 4339, 430, 527, 539, 961, 315, 264, 7086, 5502, 382, 10464, 279, 3230, 5502, 9681, 25, 5089, 11, 6593, 3756, 11, 6020, 4751, 11, 4793, 11, 2704, 11, 10034, 1567, 11, 11333, 4009, 11, 2035, 11, 6070, 11, 10034, 10966, 323, 507, 627, 1271, 1520, 499, 11, 1618, 527, 12514, 62026, 7237, 323, 31321, 2818, 34708, 369, 1855, 5502, 4877, 627, 517, 220, 330, 3928, 794, 341, 262, 330, 10614, 794, 7326, 3928, 6, 19813, 311, 22323, 11, 33776, 11, 477, 5410, 8316, 315, 19179, 1778, 439, 6622, 11, 20645, 11, 85402, 11, 5099, 10560, 262, 330, 17100, 11243, 794, 330, 5519, 539, 2440, 2536, 54920, 477, 40146, 8316, 11, 1778, 439, 364, 15031, 518, 364, 64, 2478, 518, 477, 364, 325, 17998, 518, 439, 364, 3928, 4527, 2893, 63442, 315, 4754, 5105, 67132, 11, 1778, 439, 364, 7501, 6, 320, 86626, 56485, 8, 19579, 364, 42, 70, 6, 320, 85699, 9799, 12, 51870, 570, 702, 220, 1173, 220, 330, 69216, 3756, 794, 341, 262, 330, 10614, 794, 7326, 69216, 3756, 6, 5764, 24198, 477, 41705, 1511, 369, 279, 23842, 11, 6514, 11, 477, 27344, 315, 8624, 477, 11134, 10560, 262, 330, 17100, 11243, 794, 330, 53216, 55402, 4689, 6593, 3878, 1093, 11217, 477, 35410, 82, 13, 33918, 28930, 449, 3878, 430, 617, 19091, 10648, 11, 1778, 439, 364, 7198, 425, 6, 320, 4919, 8464, 311, 2225, 264, 6593, 3756, 323, 264, 4689, 1665, 570, 2893, 63442, 315, 86055, 1990, 6593, 7766, 323, 2547, 5596, 477, 16346, 320, 68, 1326, 2637, 86055, 364, 267, 306, 6, 505, 364, 5408, 88, 1861, 702, 220, 1173, 220, 330, 76087, 4751, 794, 341, 262, 330, 10614, 794, 7326, 76087, 4751, 6, 19813, 311, 4339, 477, 32847, 5552, 311, 28989, 11, 17452, 11, 323, 279, 5708, 3157, 11, 2737, 3230, 3878, 1093, 364, 884, 52302, 3157, 6, 323, 364, 11706, 40, 4527, 761, 262, 330, 17100, 11243, 794, 330, 53216, 55402, 4689, 4339, 1093, 364, 6692, 6, 7389, 22797, 11951, 311, 6020, 38697, 13, 33918, 28930, 449, 55861, 3878, 1093, 364, 43104, 819, 518, 902, 649, 617, 2536, 85099, 5003, 50800, 13, 2893, 73898, 311, 279, 2317, 311, 6106, 13687, 22654, 315, 6020, 3878, 10246, 220, 1173, 220, 330, 4450, 794, 341, 262, 330, 10614, 794, 7326, 4450, 6, 19813, 311, 264, 659, 96324, 5089, 315, 3241, 430, 27772, 264, 3230, 734, 477, 6209, 3230, 4519, 2949, 264, 8294, 3241, 1887, 10560, 262, 330, 17100, 11243, 794, 330, 53216, 55402, 4689, 477, 2536, 19440, 3241, 3878, 11, 1778, 439, 364, 5094, 6, 477, 364, 37751, 4527, 2893, 46878, 449, 55861, 3878, 430, 1436, 8464, 311, 5361, 13761, 477, 617, 2204, 50800, 304, 1023, 38697, 11, 384, 1326, 2637, 364, 63064, 2778, 6, 320, 29177, 8464, 311, 279, 2778, 4817, 477, 279, 3241, 4793, 570, 702, 220, 1173, 220, 330, 2899, 794, 341, 262, 330, 10614, 794, 7326, 2899, 6, 304, 279, 2317, 315, 452, 643, 19813, 311, 4787, 11, 10093, 11, 477, 5415, 315, 1694, 11, 3629, 3453, 9437, 555, 3230, 21513, 477, 24282, 19392, 264, 4040, 1614, 477, 6671, 10560, 262, 330, 17100, 11243, 794, 330, 53216, 55402, 4689, 1008, 87678, 323, 1008, 56039, 430, 1541, 956, 6920, 3230, 2704, 14228, 50800, 320, 68, 1326, 2637, 364, 63959, 28626, 518, 364, 35627, 1861, 12361, 11, 5357, 389, 3878, 19392, 264, 2867, 1614, 477, 3044, 11, 1778, 439, 364, 82, 3200, 518, 364, 30895, 15556, 518, 364, 833, 14643, 291, 4527, 2893, 8010, 315, 702, 220, 1173, 220, 330, 84660, 1567, 794, 341, 262, 330, 10614, 794, 7326, 84660, 1567, 6, 19813, 311, 17057, 43682, 11, 40161, 11, 9248, 11, 477, 3953, 304, 279, 22651, 315, 74175, 323, 7106, 7640, 10560, 262, 330, 17100, 11243, 794, 330, 5519, 539, 2440, 4689, 10034, 7640, 477, 23783, 13, 33918, 28930, 994, 55402, 3878, 1093, 364, 19841, 20904, 6, 320, 3163, 836, 8, 477, 364, 10343, 11098, 6, 320, 4919, 8464, 311, 2204, 10034, 570, 702, 220, 1173, 220, 330, 23001, 4009, 794, 341, 262, 330, 10614, 794, 7326, 23001, 4009, 6, 19813, 311, 11351, 477, 12006, 430, 13195, 12707, 15840, 10560, 262, 330, 17100, 11243, 794, 330, 53216, 55402, 3927, 5039, 477, 2536, 49893, 11101, 15086, 430, 1253, 4430, 5144, 449, 6007, 14488, 11, 1778, 439, 364, 48414, 6, 369, 279, 10065, 477, 279, 2883, 13, 33918, 28930, 449, 40615, 17583, 477, 1645, 2298, 76125, 430, 1436, 2559, 369, 5361, 15086, 10246, 220, 1173, 220, 330, 2050, 794, 341, 262, 330, 10614, 794, 7326, 2050, 6, 19813, 311, 3230, 7106, 10687, 11, 1778, 439, 25861, 11, 9919, 11, 323, 61024, 11, 1405, 7640, 12446, 477, 4455, 1935, 2035, 10560, 262, 330, 17100, 11243, 794, 330, 5519, 539, 2440, 55861, 3878, 1093, 364, 791, 18288, 30343, 6, 320, 14024, 477, 3813, 8, 477, 364, 3648, 4356, 8691, 6, 320, 10348, 477, 2035, 836, 570, 2893, 46878, 994, 25607, 7634, 430, 1436, 1101, 8854, 439, 2883, 5144, 477, 14281, 3878, 10246, 220, 1173, 220, 330, 7993, 794, 341, 262, 330, 10614, 794, 7326, 7993, 6, 19813, 311, 7106, 15086, 1778, 439, 14016, 11, 40073, 11, 323, 24156, 35715, 430, 617, 264, 12742, 1376, 477, 7471, 10560, 262, 330, 17100, 11243, 794, 330, 53216, 55402, 8278, 477, 46450, 950, 15407, 13, 33918, 28930, 449, 55861, 3878, 1093, 364, 16773, 6, 320, 29177, 8464, 311, 43563, 14726, 477, 828, 12920, 8, 323, 6106, 6300, 2317, 374, 6646, 10246], skip_special_tokens=True)
    #print(len(decoded_text))

    print(tokenizer.eos_token_id)